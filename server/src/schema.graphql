type Actor {
  name: String!
}
type Genre {
  name: String!
}
type Movie { # as stored in DB and queried by client
  id: String!
  imdbID: String
  title: String!
  year: String
  released: String
  contentRating: String
  runtime: String
  director: String
  writer: String
  actors: [Actor!]
  plot: String
  genres: [Genre!]
  language: String
  country: String
  awards: String
  image: String
  ratings: [Rating!]
  imdbVotes: String
  boxOffice: String
  production: String
}

extend type User @key(fields: "id") {
  id: ID! @external
  movies: [Movie!]
}

type Query {
  movies: User
  movie(id: String!): Movie!
}

type Mutation {
  addMovies(movies: [CreateMovieInput!]!): User
  updateMovie(updateMovieInput: UpdateMovieInput!): Movie!
  removeMovie(id: String!): User
}

type Rating {
  source: String!
  score: String!
}

input GenreInput {
  name: String!
}
input ActorInput {
  name: String!
}
input RatingInput {
  source: String!
  score: String!
}
input CreateMovieInput { # output of movie_search_service && input to DB service
  imdbID: String
  title: String
  year: String
  released: String
  contentRating: String
  runtime: String
  director: String
  writer: String
  actors: [ActorInput!]
  plot: String
  genres: [GenreInput!]
  language: String
  country: String
  awards: String
  image: String
  ratings: [RatingInput!]
  imdbVotes: String
  boxOffice: String
  production: String
}

input UpdateMovieInput { # unlikely to use
  id: String!
  imdbID: String
  title: String
  year: String
  released: String
  contentRating: String
  runtime: String
  director: String
  writer: String
  actors: [ActorInput!]
  plot: String
  genres: [GenreInput!]
  language: String
  country: String
  awards: String
  image: String
  ratings: [RatingInput!]
  imdbVotes: String
  boxOffice: String
  production: String
}