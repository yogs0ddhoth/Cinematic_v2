type Actor {
  name: String!
  movies: [Movie!]
}

type Director {
  name: String!
  movies: [Movie!]
}

type Genre {
  name: String!
  movies: [Movie!]
}

type MovieTrailers {
  title: String!
  trailers: [String!] 
}

type Writer {
  name: String!
  movies: [Movie!]
}
type Movie {
  imdbID: String

  title: String!
  year: String
  released: String
  contentRating: String
  runtime: String

  director: Director
  writers: [Writer!]
  actors: [Actor!]

  plot: String
  genres: [Genre!]

  language: String
  country: String
  awards: String
  image: String
  trailers: MovieTrailers

  ratings: [Rating!]
  imdbVotes: String

  boxOffice: String
  production: String
}

type User @key(fields: "id") {
  id: String! 
  movies: [Movie!]
}

type Rating {
  source: String!
  score: String!
}

type Query {
  movies: [Movie!]
  userMovies: User
  actors(actors: [ActorInput!]!): [Actor!]
  directors(directors: [DirectorInput!]!): [Director!]
  genres(genres: [GenreInput!]!): [Genre!]
  writers(writers: [WriterInput!]!): [Writer!]
}

type Mutation {
  addMovies(movies: [CreateMovieInput!]!): User
  removeMovieFromUser(imdbID: String!): User
}

input ActorInput {
  name: String!
}

input DirectorInput {
  name: String!
}

input GenreInput {
  name: String!
}

input RatingInput {
  source: String!
  score: String!
}

input TrailersInput {
  title: String!
  trailers: [String!]
}

input WriterInput {
  name: String!
}

input CreateMovieInput { # output of movie_search_service & trailer-search-service subgraphs
  imdbID: String

  title: String!
  year: String
  released: String
  contentRating: String
  runtime: String

  director: DirectorInput
  writers: [WriterInput!]
  actors: [ActorInput!]

  plot: String
  genres: [GenreInput!]

  language: String
  country: String
  awards: String
  image: String
  trailers: TrailersInput

  ratings: [RatingInput!]
  imdbVotes: String

  boxOffice: String
  production: String
}
