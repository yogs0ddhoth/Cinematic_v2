type Genre {
  name: String!
}
type Star {
  imDbMovieID: String!
  name: String!
}
type Movie { # as stored in DB and queried by client
  id: String!
  imDbID: String!
  image: String
  title: String!
  description: String
  runtimeStr: String
  genres: String
  genreList: [Genre]
  contentRating: String
  imDbRating: String
  imDbRatingVotes: String
  metacriticRating: String
  plot: String
  stars: String
  starList: [Star]
}

extend type User @key(fields: "id") {
  id: ID! @external
  movies: [Movie]
}

type Query {
  movies: [Movie]!
  movie(id: String!): Movie
}

type Mutation {
  addMovies(movies: [CreateMovieInput!]!): [Movie]!
  updateMovie(updateMovieInput: UpdateMovieInput!): Movie!
  removeMovie(id: String!): Movie
}

input GenreInput {
  name: String!
}
input StarInput {
  imDbMovieID: String!
  name: String!
}
input CreateMovieInput { # output of ImDB service && input to DB service
  imDbID: String
  image: String
  title: String!
  description: String
  runtimeStr: String
  genres: String
  genreList: [GenreInput]!
  contentRating: String
  imDbRating: String
  imDbRatingVotes: String
  metacriticRating: String
  plot: String
  stars: String
  starList: [StarInput]!
}

input UpdateMovieInput { # unlikely to use
  id: String!
  imDbID: String
  image: String
  title: String!
  description: String
  runtimeStr: String
  genres: String
  genreList: [GenreInput]
  contentRating: String
  imDbRating: String
  imDbRatingVotes: String
  metacriticRating: String
  plot: String
  stars: String
  starList: [StarInput]
}